<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="PackagingMachine" Id="{e40f1bcf-914a-46e4-8341-5bc96b0bd344}" SpecialFunc="None">
    <Declaration><![CDATA[// PackagingMachine object represents the packaging machine as a whole.

// right now though the packaging machine only consists of staubli robot,
// but in future projects of extending the system it is now "easy" to do so.

FUNCTION_BLOCK PackagingMachine EXTENDS UnitBaseClass
VAR_INPUT
	// reset button
	resetButton		:	Button;
	// start button
	startButton		:	Button;	
	// stop button
	stopButton		:	Button;
	// emergency stop
	abortButton		:	BOOL;
	// clear emergency stop 
	clearButton		:	BOOL;
	
	(* not connected to IO
	holdButton		:	Button;
	unHoldButton	:	Button;
	suspendButton	:	Button;
	unSuspendButton	:	Button
	*)

	// mode change buttons (do not exist in real life)
	productionModeButton	:	BIT;
	maintenanceModeButton	:	BIT;
	manualModeButton		:	BIT;	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	subUnits	:	POINTER TO ARRAY[1..CONST_GV.nSubUnits] OF UnitBaseClass;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="getSignal" Id="{7e808999-f9a3-49f7-878e-9238055c1aa0}">
      <Declaration><![CDATA[METHOD getSignal : INT
VAR_INPUT
END_VAR

// arranged in a way that most important ones are checked first.

// probably needs more conditions than just button signal pressed. 
// for example the statements should be ignored if machine in transition state etc.]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF abortButton THEN
	getSignal := abortSignal;
	RETURN;
END_IF

//in currently in active state (starting, stopping, etc..) ignore
IF inStateTransition THEN
	RETURN;
END_IF
	
IF stopButton.isPressed THEN
	getSignal := stopSignal;
	RETURN;
	
ELSIF startButton.isPressed THEN
	getSignal := startSignal;
	RETURN;
	
ELSIF resetButton.isPressed THEN
	getSignal := resetSignal;
	RETURN;
	
ELSIF clearButton THEN
	getSignal := clearSignal;
	RETURN;

(*	
ELSIF holdButton.isPressed THEN
	getSignal := holdSignal;
	RETURN;
	
ELSIF unHoldButton.isPressed THEN
	getSignal := unHoldSignal;
	RETURN;
	
ELSIF suspendButton.isPressed THEN
	getSignal := suspendSignal;
	RETURN;
	
ELSIF unSuspendButton.isPressed THEN
	getSignal := unSuspendSignal;
	RETURN;
*)

ELSIF productionModeButton THEN
	getSignal := productionModeSignal;
	RETURN;
	
ELSIF maintenanceModeButton THEN
	getSignal := maintenanceModeSignal;
	RETURN;
	
ELSIF manualModeButton THEN
	getSignal := manualModeSignal;
	RETURN;
	
ELSE
	getSignal := -1;
	
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="initialize" Id="{552b0bea-8fe9-4a81-9966-6369586cdd98}">
      <Declaration><![CDATA[METHOD initialize	:	BOOL
VAR_INPUT
	arg1 	:	E_PMLProtectedUnitMode;
	arg2	:	E_PMLCommand;
	arg3	:	POINTER TO ARRAY[1..CONST_GV.nSubUnits] OF UnitBaseClass;
END_VAR
VAR
	i	:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// initialize sub units
FOR i:=1 TO CONST_GV.nSubUnits BY 1 DO
	// if any of the sub units is uninitialized then the whole machine is too
	IF NOT arg3^[i].initialize(arg1:=arg1, arg2:=arg2, arg3:=0) THEN
		RETURN;
	END_IF
END_FOR

// initialize self
unitModeManager.bExecute := TRUE;
IF (NOT (SUPER^.setMode(modeCommand:=arg1) AND SUPER^.setState(command := arg2)) ) THEN
	unitModeManager.bExecute := FALSE;
	RETURN;
END_IF

resetButton.isLit 				:= TRUE;
startButton.isLit 				:= TRUE;
stopButton.isLit				:= TRUE;

THIS^.subUnits 					:= arg3;
THIS^.initialized 				:= TRUE;
initialize 						:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setMode" Id="{6cffb050-7983-4a44-b97a-e4ac48023a93}">
      <Declaration><![CDATA[METHOD setMode : BOOL
VAR_INPUT
	modeCommand	:	DINT;
END_VAR
VAR
	prevMode	:	E_PMLProtectedUnitMode;
	i			:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// if any of the subUnits cannot change mode to given mode return false
FOR i:=1 TO CONST_GV.nSubUnits BY 1 DO
	IF NOT subUnits^[i].setMode(modeCommand:=modeCommand) THEN
		setMode := FALSE;
		RETURN;
	END_IF
END_FOR
SUPER^.setMode(modeCommand:=modeCommand);
setMode := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setState" Id="{c823ce98-0c6a-43f4-9247-d13fb9a55279}">
      <Declaration><![CDATA[
// setState method. Attempts to change the state of unit according to 
// the given input command which is a result of received user signal (startButton, stopButton ... ).

(* possible commands :	
	ePMLCommand_Undefined   := 0,
	ePMLCommand_Reset       := 1,
	ePMLCommand_Start       := 2,
	ePMLCommand_Stop        := 3,
	ePMLCommand_Hold        := 4,
	ePMLCommand_Unhold      := 5,
	ePMLCommand_Suspend     := 6,
	ePMLCommand_Unsuspend   := 7,
	ePMLCommand_Abort       := 8,
	ePMLCommand_Clear       := 9
*)

METHOD setState : BOOL
VAR_INPUT
	command	:	E_PMLCommand;
END_VAR
VAR
	prevState	:	E_PMLState;
	i			:	UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// if any of the subUnits cannot change state to given state return false
FOR i:=1 TO CONST_GV.nSubUnits BY 1 DO
	IF NOT subUnits^[i].setState(command:=command) THEN
		setState := FALSE;
		RETURN;
	END_IF
END_FOR
SUPER^.setState(command:=command);
setState := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="PackagingMachine">
      <LineId Id="104" Count="0" />
    </LineIds>
    <LineIds Name="PackagingMachine.getSignal">
      <LineId Id="68" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="87" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="38" Count="3" />
      <LineId Id="19" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="76" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="30" Count="7" />
      <LineId Id="42" Count="5" />
      <LineId Id="52" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="53" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="2" />
      <LineId Id="60" Count="3" />
      <LineId Id="58" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="PackagingMachine.initialize">
      <LineId Id="30" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="PackagingMachine.setMode">
      <LineId Id="9" Count="7" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="PackagingMachine.setState">
      <LineId Id="35" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>